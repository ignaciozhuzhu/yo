// 引入 gulp
var gulp = require('gulp');

// 引入组件
// html
var htmlhint = require('gulp-htmlhint');
var htmlmin = require('gulp-htmlmin');

var less = require('gulp-less');
var mincss = require('gulp-minify-css');

var imagemin = require('gulp-imagemin');

var jshint = require('gulp-jshint');
var concat = require('gulp-concat');
var uglify = require('gulp-uglify');
var rename = require('gulp-rename');
var clean = require('gulp-clean');
var sequence = require('gulp-sequence');

var webpack = require("webpack");
var gulpWebpack = require('gulp-webpack');
var webpackConfig = require('./webpack.config');

var tar = require('gulp-tar');
var gzip = require('gulp-gzip');
var ssh = require('gulp-ssh');

var date = new Date();

// HTML处理
gulp.task('html', function() {
    var src = [
        "./src/**/*.html",
        "./src/**/*.htm"
    ];

    switch (process.env.NODE_ENV) {
        case "production":
        case "test":

            return gulp.src(src)
                .pipe(htmlhint())
                .pipe(htmlmin())
                .pipe(gulp.dest('./dist/'));

        case "development":
        default:

            return gulp.src(src)
                // .pipe(htmlhint())
                // .pipe(htmlmin())
                .pipe(gulp.dest('../nginx-1.10.1/dist/'));
    }

});

// 样式处理
gulp.task('less', function() {

    var src = [
        './src/**/*.less'
    ];

    switch (process.env.NODE_ENV) {
        case "production":
        case "test":

            return gulp.src(src)
                .pipe(less())
                .pipe(mincss())
                //.pipe(rename({ suffix: '.min' }))
                .pipe(gulp.dest('./dist'));

        case "development":
        default:

            return gulp.src(src)
                .pipe(less())
                // .pipe(mincss())
                //.pipe(rename({ suffix: '.min' }))
                .pipe(gulp.dest('../nginx-1.10.1/dist'));
    }

});

gulp.task('css', function() {

    var src = [
        './src/**/*.css'
    ];

    switch (process.env.NODE_ENV) {
        case "production":
        case "test":

            return gulp.src(src)
                .pipe(mincss())
                //.pipe(rename({ suffix: '.min' }))
                .pipe(gulp.dest('./dist'));

        case "development":
        default:

            return gulp.src(src)
                // .pipe(mincss())
                //.pipe(rename({ suffix: '.min' }))
                .pipe(gulp.dest('../nginx-1.10.1/dist'));
    }

});

// 图片处理
gulp.task('image', function() {

    var src = [
        './src/**/*.{gif,jpeg,jpg,png,ico}'
    ];

    switch (process.env.NODE_ENV) {
        case "production":
        case "test":

            return gulp.src(src)
                .pipe(imagemin())
                .pipe(gulp.dest('./dist'));

        case "development":
        default:

            return gulp.src(src)
                // .pipe(imagemin())
                .pipe(gulp.dest('../nginx-1.10.1/dist'));
    }
})

// 脚本处理
// webpack
gulp.task("webpack", function() {

    var src = [
        './'
    ];

    var webpackEnv = {};
    switch (process.env.NODE_ENV) {
        case "production":
            webpackEnv = {
                // This has effect on the react lib size 
                "NODE_ENV": JSON.stringify(process.env.NODE_ENV),
                "API_URL": JSON.stringify("https://wx.yayi365.cn/ya/"),
                "IP_URL": JSON.stringify("wx.yayi365.cn"),
                "WEIXINPAY_URL": JSON.stringify("https%3a%2f%2fwx.yayi365.cn%2fpersonal%2fper_npay_pay.html"),
                "PROTOCOL_URL": JSON.stringify("https://")
            }
            break;

        case "test":
            webpackEnv = {
                "NODE_ENV": JSON.stringify("test"), // react has no option: test. (只是reat不能压缩)
                "API_URL": JSON.stringify("https://wx1.yayi365.cn/ya/"),
                "IP_URL": JSON.stringify("wx1.yayi365.cn"),
                "WEIXINPAY_URL": JSON.stringify("https%3a%2f%2fwx1.yayi365.cn%2fpersonal%2fper_npay_pay.html"),
                "PROTOCOL_URL": JSON.stringify("https://")
            }
            break;

        case "development":
        default:
            webpackEnv = {
                "NODE_ENV": JSON.stringify(process.env.NODE_ENV), // react has no option: test. 
                "API_URL": JSON.stringify("http://localhost/yayi/ya/"),
                "IP_URL": JSON.stringify("localhost"),
                "WEIXINPAY_URL": JSON.stringify("http%3a%2f%2flocalhost%2fpersonal%2fper_npay_pay.html"),
                "PROTOCOL_URL": JSON.stringify("http://")

                //prod
                //"NODE_ENV": JSON.stringify(process.env.NODE_ENV),
                //"API_URL": JSON.stringify("https://wx.yayi365.cn/ya/"),
                //"IP_URL": JSON.stringify("wx.yayi365.cn"),
                //"WEIXINPAY_URL": JSON.stringify("https%3a%2f%2fwx.yayi365.cn%2fpersonal%2fper_npay_pay.html"),
                //"PROTOCOL_URL": JSON.stringify("https://")

                //test
                //"NODE_ENV": JSON.stringify("production"), // react has no option: test. 
                //"API_URL": JSON.stringify("https://wx1.yayi365.cn/ya/"),
                //"IP_URL": JSON.stringify("wx1.yayi365.cn"),
                //"WEIXINPAY_URL": JSON.stringify("https%3a%2f%2fwx1.yayi365.cn%2fpersonal%2fper_npay_pay.html"),
                //"PROTOCOL_URL": JSON.stringify("https://")
            }
            break;
    }

    var myConfig = Object.create(webpackConfig);
    myConfig.plugins = myConfig.plugins.concat(
        new webpack.DefinePlugin({
            "process.env": webpackEnv
        })
    );

    switch (process.env.NODE_ENV) {
        case "production":
        case "test":

            return gulp
                .src(src)
                .pipe(gulpWebpack(myConfig))
                .pipe(uglify())
                .pipe(gulp.dest('./dist'));

        case "development":
        default:

            return gulp
                .src(src)
                .pipe(gulpWebpack(myConfig))
                // .pipe(uglify())
                .pipe(gulp.dest('../nginx-1.10.1/dist'));

    }

});

gulp.task("js", function() {

    var src = [
        "./src/js/jquery*.js", // jquery.form.js, jquery-1.12.0.min.js
        "./src/js/main.js",
        "./src/personal/js/pingpp.js",
        "./src/personal/ap.js",
    ];

    switch (process.env.NODE_ENV) {
        case "production":
        case "test":

            return gulp
                .src(src, {
                    base: './src'
                })
                .pipe(uglify())
                .pipe(gulp.dest('./dist/'));

        case "development":
        default:

            return gulp
                .src(src, {
                    base: './src'
                })
                // .pipe(uglify())
                .pipe(gulp.dest('../nginx-1.10.1/dist/'));

    }

});

// copy输出到dist
gulp.task('dist', function() {

    var src = [
        "./src/fonts/**/*",
    ];

    switch (process.env.NODE_ENV) {
        case "production":
        case "test":

            return gulp.src(src, {
                    base: './src'
                })
                .pipe(gulp.dest('./dist'));

        case "development":
        default:

            return gulp.src(src, {
                    base: './src'
                })
                .pipe(gulp.dest('../nginx-1.10.1/dist'));

    }

});

// 清理
gulp.task('clean', function() {
    switch (process.env.NODE_ENV) {
        case "production":
        case "test":
            return gulp.src([
                "./dist",
                "./publish"
            ]).pipe(clean());

        case "development":
        default:
            return gulp.src([
                "../nginx-1.10.1/dist"
            ]).pipe(clean({
                force: true
            }));
    }
});

// watch 
gulp.task('watch', function() {
    gulp.watch('./src/**/*.js', function() {
        gulp.run('webpack', 'js');
    });
});

// 默认build dev
gulp.task('default', sequence("dev"));

function setEnv(env) {
    process.env.NODE_ENV = env;

    process.stdout.write("\n*****************************************\n");
    process.stdout.write("当前环境: " + process.env.NODE_ENV + "\n");
    process.stdout.write("*****************************************\n\n");
}

// build dev
gulp.task('dev', function(callback) {
    setEnv("development");
    return sequence('clean', ['html', 'less', 'css', 'image', 'webpack', 'js'], 'dist')(callback);
});

// build test
gulp.task('test', function(callback) {
    setEnv("test");
    return sequence('clean', ['html', 'less', 'css', 'image', 'webpack', 'js'], 'dist')(callback);
});

// build prod
gulp.task('prod', function(callback) {
    setEnv("production");
    return sequence('clean', ['html', 'less', 'css', 'image', 'webpack', 'js'], 'dist')(callback);
});

////////////////////////////////////////////////////
// 部署
////////////////////////////////////////////////////

var tarfile = "dist_" + date.getFullYear() + "-" + (date.getMonth() + 1) + "-" +
    date.getDate() + "_" + date.getHours() + "-" + date.getMinutes() + "-" + date.getSeconds();
var dst_dir = "/yayi/weixin_qd";
var nginx_dir = "/usr/share/nginx/html/wx.yayi365.cn";

function tarAndUpload(ssh) {
    return gulp.src(['./dist/**'], {
            base: './dist'
        })
        .pipe(tar(tarfile + ".tar"))
        .pipe(gzip())
        .pipe(gulp.dest('./publish/'))
        .pipe(ssh.dest(dst_dir));
}

function shellExe(ssh) {
    return ssh
        .shell([
            'cd ' + dst_dir,
            "mkdir " + tarfile,
            "tar xvf " + tarfile + ".tar.gz -C " + tarfile,
            "ln -sfT " + dst_dir + "/" + tarfile + " " + nginx_dir, // nginx 软连接到最新版本
        ], {
            filePath: 'shell.log'
        })
        .pipe(gulp.dest('logs'));
}

////////////// 部署测试版本 /////////////

// 应从配置文件中读入
var test_config = {
    // host: '120.27.147.43', //外网
    host: '10.47.102.154', //内网
    port: 22,
    username: 'root',
    password: '1949+yigu',
}

var test_ssh = new ssh({
    ignoreErrors: false,
    sshConfig: test_config
})

gulp.task('deploy-test-upload', function() {
    return tarAndUpload(test_ssh);
})

gulp.task('deploy-test-shell', function() {
    return shellExe(test_ssh);
})

gulp.task('deploy-test', sequence('test', 'deploy-test-upload', 'deploy-test-shell'));

//////////// 部署生产环境 ///////////////

// 应从配置文件中读入
var prod_config = {
    // host: '120.27.142.49', //外网
    host: '10.47.102.168', //内网
    port: 22,
    username: 'root',
    password: '2015+yigukeji',
}

var prod_ssh = new ssh({
    ignoreErrors: false,
    sshConfig: prod_config
})

gulp.task('deploy-prod-upload', function() {
    return tarAndUpload(prod_ssh);
})

gulp.task('deploy-prod-shell', function() {
    return shellExe(prod_ssh);
})

gulp.task('deploy-prod', sequence('prod', 'deploy-prod-upload', 'deploy-prod-shell'));